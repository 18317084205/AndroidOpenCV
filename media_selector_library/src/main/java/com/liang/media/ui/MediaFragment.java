package com.liang.media.ui;import android.app.Activity;import android.content.Intent;import android.database.Cursor;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import com.liang.media.*;import com.liang.media.adapter.MediaAdapter;import com.liang.media.bean.MediaInfo;import com.liang.media.loader.FolderCursorLoader;import java.util.List;public class MediaFragment extends Fragment implements MediaCollection.LoaderCallbacks,        MediaAdapter.OnItemListener, View.OnClickListener {    public static final String FOLDER_ID = "folder_id";    private Button mPreview;    private Button mComplete;    private RecyclerView mMediaList;    private MediaAdapter mMediaAdapter;    private MediaCollection mMediaCollection;    private String mFolderId = FolderCursorLoader.ALL_FOLDER_ID;    private SelectedCollection mSelectedCollection;    private long time;    public static MediaFragment newInstance() {        return new MediaFragment();    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        return inflater.inflate(R.layout.fragment_media, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        mMediaList = view.findViewById(R.id.media_list);        mPreview = view.findViewById(R.id.bar_preview);        mComplete = view.findViewById(R.id.bar_complete);    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        int spanCount = RequestConfig.getInstance().spanCount;        int dividerWidth = RequestConfig.getInstance().dividerWidth;        mMediaList.setHasFixedSize(true);        mMediaList.setLayoutManager(new GridLayoutManager(getActivity(), spanCount));        mMediaList.addItemDecoration(new RecyclerItemDecoration(spanCount, dividerWidth));        mSelectedCollection = new SelectedCollection(getActivity());        mSelectedCollection.init(savedInstanceState);        mMediaAdapter = new MediaAdapter(mSelectedCollection);        mMediaAdapter.setOnItemListener(this);        mMediaList.setAdapter(mMediaAdapter);        if (savedInstanceState != null) {            mFolderId = savedInstanceState.getString(FOLDER_ID, FolderCursorLoader.ALL_FOLDER_ID);        }        loadMedia(mFolderId);    }    @Override    public void onSaveInstanceState(@NonNull Bundle outState) {        outState.putString(FOLDER_ID, mFolderId);        mSelectedCollection.onSaveInstanceState(outState);        super.onSaveInstanceState(outState);    }    @Override    public void onMediaLoadFinished(Cursor cursor) {        Log.e("RUN_TIME", "onMediaLoadFinished: " + (System.nanoTime() / 1000000L - time));        mMediaAdapter.swapCursor(cursor);        refreshBottomBar();    }    @Override    public void onMediaLoaderReset() {        mMediaAdapter.swapCursor(null);    }    private void refreshBottomBar() {        mPreview.setEnabled(!mSelectedCollection.isEmpty());        mComplete.setEnabled(!mSelectedCollection.isEmpty());        mPreview.setText(getString(R.string.selected_preview));        mComplete.setText(String.format(getString(R.string.selected_complete), mSelectedCollection.count()));    }    public void loadMedia(String folderId) {        time = System.nanoTime() / 1000000L;        mMediaCollection = new MediaCollection(getActivity(), this);        mMediaCollection.loadMedia(folderId);    }    public void setFolderId(String folderId) {        if (mFolderId.equals(folderId)) {            return;        }        if (mMediaAdapter != null) {            mMediaAdapter.swapCursor(null);        }        if (mMediaCollection != null) {            mMediaCollection.onDestroy();        }        mFolderId = folderId;    }    @Override    public void onDestroyView() {        super.onDestroyView();        mMediaCollection.onDestroy();    }    @Override    public void onHiddenChanged(boolean hidden) {        super.onHiddenChanged(hidden);        if (!hidden) {            loadMedia(mFolderId);        }    }    @Override    public void onCapture() {    }    @Override    public void onItemSelected(List<MediaInfo> selectedMedias) {        refreshBottomBar();    }    @Override    public void onItemPressed(MediaInfo mediaInfo) {        if (!RequestConfig.getInstance().isCheck()){            sendResult();            getActivity().finish();            return;        }    }    @Override    public void onClick(View v) {        if (v == mPreview) {        }        if (v == mComplete) {            sendResult();            getActivity().finish();        }    }    private void sendResult() {        Intent intent = new Intent();        intent.putParcelableArrayListExtra(MediaRequest.EXTRA_RESULT_URI, mSelectedCollection.asListOfUri());        intent.putStringArrayListExtra(MediaRequest.EXTRA_RESULT_PATH, mSelectedCollection.asListOfString());        getActivity().setResult(Activity.RESULT_OK, intent);    }}