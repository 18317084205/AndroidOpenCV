package com.liang.media.adapter;import android.database.Cursor;import android.support.annotation.NonNull;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.Toast;import com.liang.media.R;import com.liang.media.SelectedCollection;import com.liang.media.RequestConfig;import com.liang.media.bean.MediaInfo;import com.liang.media.view.GridItemView;import java.util.List;public class MediaAdapter extends RecyclerViewCursorAdapter<RecyclerView.ViewHolder> {    private OnItemListener mOnItemListener;    private static final int VIEW_TYPE_CAPTURE = 0x01;    private static final int VIEW_TYPE_MEDIA = 0x02;    private SelectedCollection mSelectedCollection;    public MediaAdapter(SelectedCollection selectedCollection) {        super(null);        this.mSelectedCollection = selectedCollection;    }    public void setOnItemListener(OnItemListener onItemListener) {        this.mOnItemListener = onItemListener;    }    @NonNull    @Override    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {        if (viewType == VIEW_TYPE_CAPTURE) {            return new CaptureViewHolder(LayoutInflater.from(viewGroup.getContext()).                    inflate(R.layout.capture_selector_item, viewGroup, false));        }        return new MediaViewHolder(LayoutInflater.from(viewGroup.getContext()).                inflate(R.layout.media_selector_item, viewGroup, false));    }    @Override    protected void onBindViewHolder(RecyclerView.ViewHolder holder, Cursor cursor) {        if (holder instanceof CaptureViewHolder) {            ((CaptureViewHolder) holder).media_icon.setImageResource(RequestConfig.getInstance().ic_camera);            holder.itemView.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    if (mOnItemListener != null) {                        mOnItemListener.onCapture();                    }                }            });        }        if (holder instanceof MediaViewHolder) {            MediaInfo info = new MediaInfo(cursor);            MediaViewHolder viewHolder = (MediaViewHolder) holder;            viewHolder.bindMediaInfo(info);        }        Log.e("RUN_TIME", "onBindViewHolder: " + (System.nanoTime() / 1000000L - time));    }    @Override    protected int getItemViewType(int position, Cursor cursor) {        return new MediaInfo(cursor).mimeType.isEmpty() ?                VIEW_TYPE_CAPTURE : VIEW_TYPE_MEDIA;    }    public class CaptureViewHolder extends RecyclerView.ViewHolder {        private ImageView media_icon;        public CaptureViewHolder(View itemView) {            super(itemView);            media_icon = itemView.findViewById(R.id.image);        }    }    public class MediaViewHolder extends RecyclerView.ViewHolder            implements GridItemView.OnGridItemListener {        private GridItemView gridItemView;        MediaViewHolder(View itemView) {            super(itemView);            gridItemView = (GridItemView) itemView;            gridItemView.setOnGridItemListener(this);        }        public void bindMediaInfo(MediaInfo mediaInfo) {            gridItemView.bindMediaInfo(mediaInfo);            gridItemView.setChecked(mSelectedCollection.isSelected(mediaInfo));        }        @Override        public void onItemCheckedChanged(MediaInfo mediaInfo, boolean isChecked) {            if (isChecked) {                if (mSelectedCollection.count() >=                        RequestConfig.getInstance().selectedMaxCount) {                    Toast.makeText(itemView.getContext(), String.format(itemView.getContext()                            .getString(getSelectedMaxHint()), RequestConfig.getInstance()                            .selectedMaxCount), Toast.LENGTH_SHORT).show();                    return;                }                mSelectedCollection.add(mediaInfo);            } else {                mSelectedCollection.remove(mediaInfo);            }//            notifyItemChanged(getAdapterPosition());            gridItemView.setChecked(mSelectedCollection.isSelected(mediaInfo));            if (mOnItemListener != null) {                mOnItemListener.onItemSelected(mSelectedCollection.asList());            }        }        private int getSelectedMaxHint() {            if (RequestConfig.getInstance().onlyShowImages()) {                return R.string.select_max_hint_image;            } else if (RequestConfig.getInstance().onlyShowVideos()) {                return R.string.select_max_hint_video;            } else if (RequestConfig.getInstance().onlyShowImagesAndVideos()) {                return R.string.select_max_hint_image_or_video;            }            return R.string.select_max_hint;        }        @Override        public void onItemPressed(MediaInfo mediaInfo) {            if (!RequestConfig.getInstance().isCheck()){                mSelectedCollection.clear();                mSelectedCollection.add(mediaInfo);            }            if (mOnItemListener != null) {                mOnItemListener.onItemPressed(mediaInfo);            }        }    }    public interface OnItemListener {        void onCapture();        void onItemSelected(List<MediaInfo> selectedMedias);        void onItemPressed(MediaInfo mediaInfo);    }}